"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var UserService = (function () {
    function UserService() {
        this.User = new Array({
            id: 1, name: "on.lk", user: [
                {
                    company_id: 1, name: "fluke", employee: [
                        { emp_id: 1, name: "fluke", password: "1234" },
                        { emp_id: 2, name: "bb", password: "1234" },
                        { emp_id: 3, name: "fern", password: "1234" },
                        { emp_id: 4, name: "zee", password: "1234" },
                    ]
                },
                {
                    company_id: 2, name: "eiei", employee: [
                        { emp_id: 1, name: "fluke", password: "1234" },
                        { emp_id: 2, name: "bb", password: "1234" },
                        { emp_id: 3, name: "fern", password: "1234" },
                        { emp_id: 4, name: "zee", password: "1234" },
                    ]
                },
            ]
        });
    }
    UserService.prototype.getUsers = function () {
        return this.User;
    };
    UserService.prototype.getUser = function (id) {
        return this.User.filter(function (user) { return user.id === id; })[0];
    };
    return UserService;
}());
UserService = __decorate([
    core_1.Injectable()
], UserService);
exports.UserService = UserService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidXNlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBSTNDLElBQWEsV0FBVztJQUR4QjtRQUVZLFNBQUksR0FBRyxJQUFJLEtBQUssQ0FDcEI7WUFDSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO2dCQUN4QjtvQkFDSSxVQUFVLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFO3dCQUNwQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO3dCQUM5QyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO3dCQUMzQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO3dCQUM3QyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO3FCQUMvQztpQkFDSjtnQkFDRDtvQkFDSSxVQUFVLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFO3dCQUNuQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO3dCQUM5QyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO3dCQUMzQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO3dCQUM3QyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO3FCQUMvQztpQkFDSjthQUNKO1NBQ0osQ0FDSixDQUFDO0lBU04sQ0FBQztJQVBHLDhCQUFRLEdBQVI7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNyQixDQUFDO0lBRUQsNkJBQU8sR0FBUCxVQUFRLEVBQVU7UUFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBZCxDQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBQ0wsa0JBQUM7QUFBRCxDQUFDLEFBL0JELElBK0JDO0FBL0JZLFdBQVc7SUFEdkIsaUJBQVUsRUFBRTtHQUNBLFdBQVcsQ0ErQnZCO0FBL0JZLGtDQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcblxyXG5pbXBvcnQgeyB1c2VyIH0gZnJvbSAnLi91c2VyJztcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgVXNlclNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBVc2VyID0gbmV3IEFycmF5PHVzZXI+KFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDEsIG5hbWU6IFwib24ubGtcIiwgdXNlcjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBhbnlfaWQ6IDEsIG5hbWU6IFwiZmx1a2VcIiwgZW1wbG95ZWU6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeyBlbXBfaWQ6IDEsIG5hbWU6IFwiZmx1a2VcIiwgcGFzc3dvcmQ6IFwiMTIzNFwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgZW1wX2lkOiAyLCBuYW1lOiBcImJiXCIsIHBhc3N3b3JkOiBcIjEyMzRcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7IGVtcF9pZDogMywgbmFtZTogXCJmZXJuXCIsIHBhc3N3b3JkOiBcIjEyMzRcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7IGVtcF9pZDogNCwgbmFtZTogXCJ6ZWVcIiwgcGFzc3dvcmQ6IFwiMTIzNFwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjb21wYW55X2lkOiAyLCBuYW1lOiBcImVpZWlcIiwgZW1wbG95ZWU6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeyBlbXBfaWQ6IDEsIG5hbWU6IFwiZmx1a2VcIiwgcGFzc3dvcmQ6IFwiMTIzNFwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgZW1wX2lkOiAyLCBuYW1lOiBcImJiXCIsIHBhc3N3b3JkOiBcIjEyMzRcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7IGVtcF9pZDogMywgbmFtZTogXCJmZXJuXCIsIHBhc3N3b3JkOiBcIjEyMzRcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7IGVtcF9pZDogNCwgbmFtZTogXCJ6ZWVcIiwgcGFzc3dvcmQ6IFwiMTIzNFwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICApO1xyXG5cclxuICAgIGdldFVzZXJzKCk6IHVzZXJbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuVXNlcjtcclxuICAgIH1cclxuXHJcbiAgICBnZXRVc2VyKGlkOiBudW1iZXIpOiB1c2VyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5Vc2VyLmZpbHRlcih1c2VyID0+IHVzZXIuaWQgPT09IGlkKVswXTtcclxuICAgIH1cclxufVxyXG4iXX0=